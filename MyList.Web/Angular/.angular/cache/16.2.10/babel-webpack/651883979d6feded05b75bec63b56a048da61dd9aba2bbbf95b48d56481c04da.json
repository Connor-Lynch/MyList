{"ast":null,"code":"import { BehaviorSubject, of } from \"rxjs\";\nimport { catchError, shareReplay, tap } from \"rxjs/operators\";\nimport { AppConfiguration } from \"read-appsettings-json\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/material/snack-bar\";\nexport let ShoppingListService = /*#__PURE__*/(() => {\n  class ShoppingListService {\n    constructor(http, snackBar) {\n      this.http = http;\n      this.snackBar = snackBar;\n      this.shoppingLists = new BehaviorSubject([]);\n      this.apiRootUrl = AppConfiguration.Setting().apiUrl;\n    }\n    getAllShoppingLists() {\n      const endpoint = `${this.apiRootUrl}/ShoppingLists`;\n      return this.http.get(endpoint).pipe(tap(l => this.shoppingLists.next(l)), catchError(e => this.handleError(\"Unable to Retrieve Lists\", e)));\n    }\n    getShoppingListById(id) {\n      if (!this.shoppingListsIsEmpty && this.containsShoppingList(id)) {\n        return of(this.shoppingLists.getValue().find(l => l.id === id));\n      } else {\n        return this.getShoppingListFromApiById(id);\n      }\n    }\n    addShoppingList(newList) {\n      const endpoint = `${this.apiRootUrl}/ShoppingLists/Add`;\n      return this.http.post(endpoint, newList).pipe(catchError(e => this.handleError(\"Unable to Add New Lists\", e)));\n    }\n    updateShoppingList(updatedList) {\n      const endpoint = `${this.apiRootUrl}/ShoppingLists/Update`;\n      return this.http.put(endpoint, updatedList).pipe(catchError(e => this.handleError(\"Unable to Update List\", e)));\n    }\n    removeShoppingList(id) {\n      const endpoint = `${this.apiRootUrl}/ShoppingLists/Delete/${id}`;\n      return this.http.delete(endpoint).pipe(catchError(e => this.handleError(\"Unable to Remove List\", e)));\n    }\n    getShoppingListFromApiById(id) {\n      const endpoint = `${this.apiRootUrl}/ShoppingLists/${id}`;\n      return this.http.get(endpoint).pipe(shareReplay(1), catchError(e => this.handleError(\"Unable to Get List\", e)));\n    }\n    get shoppingListsIsEmpty() {\n      return this.shoppingLists.getValue().length === 0;\n    }\n    containsShoppingList(id) {\n      return this.shoppingLists.getValue().find(l => l.id === id) != null;\n    }\n    handleError(message, error) {\n      this.snackBar.open(message, \"Dismiss\");\n      throw error;\n    }\n    static #_ = this.ɵfac = function ShoppingListService_Factory(t) {\n      return new (t || ShoppingListService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MatSnackBar));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ShoppingListService,\n      factory: ShoppingListService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ShoppingListService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}