{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ListState } from './services/list-state.service';\nimport { AppRoutes } from 'src/app/models/app-routes';\nimport { takeUntil, tap } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/shopping-list-item.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"./components/item/item.component\";\nimport * as i6 from \"./components/add-item/add-item.component\";\nfunction ItemsComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"app-item\", 2);\n    i0.ɵɵlistener(\"ngModelChange\", function ItemsComponent_div_0_Template_app_item_ngModelChange_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const index_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.itemsControl.value[index_r2] = $event);\n    })(\"listStateChange\", function ItemsComponent_div_0_Template_app_item_listStateChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.listState = $event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const index_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.itemsControl.value[index_r2])(\"listState\", ctx_r0.listState)(\"registerOnChange\", ctx_r0.itemChanged());\n  }\n}\nexport let ItemsComponent = /*#__PURE__*/(() => {\n  class ItemsComponent {\n    constructor(activatedRoute, shoppingListItemService) {\n      this.activatedRoute = activatedRoute;\n      this.shoppingListItemService = shoppingListItemService;\n      this.itemsControl = new FormControl([]);\n      this.destroy$ = new Subject();\n      this.onChange = value => undefined;\n      this.onTouched = () => undefined;\n    }\n    ngOnInit() {\n      this.shoppingListId = this.activatedRoute.snapshot.paramMap.get(AppRoutes.shoppingList.data);\n      this.listState = new ListState();\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    addItem(newItemName) {\n      const newItem = {\n        name: newItemName,\n        id: null,\n        shoppingListId: this.shoppingListId,\n        isChecked: false,\n        sortOrder: null\n      };\n      this.saveNewItem(newItem);\n    }\n    itemChanged() {\n      this.itemsControl.setValue(this.itemsControl.value.filter(i => i));\n      this.onChange(this.itemsControl.value);\n    }\n    writeValue(value) {\n      this.itemsControl.setValue(value);\n    }\n    setDisabledState(isDisabled) {\n      isDisabled ? this.itemsControl.disable() : this.itemsControl.enable();\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    saveNewItem(newItem) {\n      this.shoppingListItemService.addShoppingListItem(newItem).pipe(tap(shoppingList => {\n        this.itemsControl.setValue(shoppingList.items);\n        this.itemChanged();\n      }), takeUntil(this.destroy$)).subscribe();\n    }\n    static #_ = this.ɵfac = function ItemsComponent_Factory(t) {\n      return new (t || ItemsComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ShoppingListItemService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ItemsComponent,\n      selectors: [[\"app-items\"]],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => ItemsComponent),\n        multi: true\n      }])],\n      decls: 2,\n      vars: 2,\n      consts: [[4, \"ngFor\", \"ngForOf\"], [1, \"w-full\", 3, \"listState\", \"listStateChange\", \"addItemEvent\"], [3, \"ngModel\", \"listState\", \"registerOnChange\", \"ngModelChange\", \"listStateChange\"]],\n      template: function ItemsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, ItemsComponent_div_0_Template, 2, 3, \"div\", 0);\n          i0.ɵɵelementStart(1, \"app-add-item\", 1);\n          i0.ɵɵlistener(\"listStateChange\", function ItemsComponent_Template_app_add_item_listStateChange_1_listener($event) {\n            return ctx.listState = $event;\n          })(\"addItemEvent\", function ItemsComponent_Template_app_add_item_addItemEvent_1_listener($event) {\n            return ctx.addItem($event);\n          });\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngForOf\", ctx.itemsControl.value);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"listState\", ctx.listState);\n        }\n      },\n      dependencies: [i3.NgForOf, i4.NgControlStatus, i4.NgModel, i5.ItemComponent, i6.AddItemComponent]\n    });\n  }\n  return ItemsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}