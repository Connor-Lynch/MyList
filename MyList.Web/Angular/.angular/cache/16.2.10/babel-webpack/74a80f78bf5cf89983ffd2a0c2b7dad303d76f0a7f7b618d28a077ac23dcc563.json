{"ast":null,"code":"import { EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ItemFormFields } from './models/item-form-fields';\nimport { Subject } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/shopping-list-item.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/checkbox\";\nimport * as i5 from \"../../../actions/actions.component\";\nimport * as i6 from \"../edit-item/edit-item.component\";\nfunction ItemComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 5);\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(5);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r2);\n  }\n}\nfunction ItemComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 5);\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r4 = i0.ɵɵreference(7);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r4);\n  }\n}\nfunction ItemComponent_ng_template_4_app_actions_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-actions\", 9);\n    i0.ɵɵlistener(\"acceptEvent\", function ItemComponent_ng_template_4_app_actions_3_Template_app_actions_acceptEvent_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.editItem());\n    })(\"declineEvent\", function ItemComponent_ng_template_4_app_actions_3_Template_app_actions_declineEvent_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.deleteItem());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"acceptLast\", false);\n  }\n}\nfunction ItemComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"p\", 7);\n    i0.ɵɵlistener(\"click\", function ItemComponent_ng_template_4_Template_p_click_1_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.selectItem());\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, ItemComponent_ng_template_4_app_actions_3_Template, 1, 1, \"app-actions\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"line-through\", ctx_r3.formGroup.controls[ctx_r3.formFields.IsChecked].value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r3.formGroup.controls[ctx_r3.formFields.Name].value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.isSelected());\n  }\n}\nfunction ItemComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-edit-item\", 10);\n    i0.ɵɵlistener(\"acceptEvent\", function ItemComponent_ng_template_6_Template_app_edit_item_acceptEvent_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.acceptEdit($event));\n    })(\"declineEvent\", function ItemComponent_ng_template_6_Template_app_edit_item_declineEvent_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.cancelEdit());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"inputText\", ctx_r5.formGroup.controls[ctx_r5.formFields.Name].value);\n  }\n}\nexport let ItemComponent = /*#__PURE__*/(() => {\n  class ItemComponent {\n    constructor(formBuilder, shoppingListItemService) {\n      this.formBuilder = formBuilder;\n      this.shoppingListItemService = shoppingListItemService;\n      this.listStateChange = new EventEmitter();\n      this.formFields = ItemFormFields;\n      this.isSelected = () => this.listState.selectedId && this.listState.selectedId === this.pristineValue?.id;\n      this.isUnderEdit = () => this.listState.itemUnderEditId && this.listState.itemUnderEditId === this.pristineValue?.id;\n      this.destroy$ = new Subject();\n      this.onChange = value => undefined;\n      this.onTouched = () => undefined;\n    }\n    ngOnInit() {\n      this.formGroup = this.formBuilder.group({\n        [ItemFormFields.IsChecked]: [],\n        [ItemFormFields.Name]: []\n      });\n      this.initFormSubscriptions();\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    selectItem() {\n      this.listState.trySelectItem(this.pristineValue.id);\n      this.listStateChange.emit(this.listState);\n    }\n    editItem() {\n      this.listState.tryEditItem(this.pristineValue.id);\n      this.listStateChange.emit(this.listState);\n    }\n    acceptEdit(updatedName) {\n      this.editItem();\n      this.selectItem();\n      const updatedItem = {\n        ...this.pristineValue,\n        name: updatedName\n      };\n      this.updateItem(updatedItem);\n    }\n    cancelEdit() {\n      this.editItem();\n      this.formGroup.controls[ItemFormFields.Name].setValue(this.pristineValue.name);\n    }\n    deleteItem() {\n      this.shoppingListItemService.removeShoppingListItem(this.pristineValue.id).pipe(tap(() => this.onChange(null)), takeUntil(this.destroy$)).subscribe();\n    }\n    writeValue(value) {\n      this.pristineValue = value;\n      value?.isChecked ? this.formGroup.controls[ItemFormFields.IsChecked].setValue(value.isChecked) : this.formGroup.controls[ItemFormFields.IsChecked].setValue(false);\n      value?.name ? this.formGroup.controls[ItemFormFields.Name].setValue(value.name) : this.formGroup.controls[ItemFormFields.Name].setValue(null);\n    }\n    setDisabledState(isDisabled) {\n      isDisabled ? this.formGroup.disable() : this.formGroup.enable();\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    initFormSubscriptions() {\n      this.formGroup.controls[ItemFormFields.IsChecked].valueChanges.pipe(tap(newValue => this.isCheckedChanged(newValue)), takeUntil(this.destroy$)).subscribe();\n    }\n    isCheckedChanged(newValue) {\n      if (!this.pristineValue || newValue === this.pristineValue.isChecked) {\n        return;\n      }\n      const updatedItem = {\n        ...this.pristineValue,\n        isChecked: newValue\n      };\n      this.updateItem(updatedItem);\n    }\n    updateItem(updatedItem) {\n      this.shoppingListItemService.updateShoppingListItem(updatedItem).pipe(tap(() => this.onChange(updatedItem)), takeUntil(this.destroy$)).subscribe();\n    }\n    static #_ = this.ɵfac = function ItemComponent_Factory(t) {\n      return new (t || ItemComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ShoppingListItemService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ItemComponent,\n      selectors: [[\"app-item\"]],\n      inputs: {\n        listState: \"listState\"\n      },\n      outputs: {\n        listStateChange: \"listStateChange\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => ItemComponent),\n        multi: true\n      }])],\n      decls: 8,\n      vars: 5,\n      consts: [[1, \"w-full\", \"h-4rem\", \"grid\", \"grid-nogutter\", \"flex\", \"align-items-center\", 3, \"formGroup\"], [1, \"col-1\", 3, \"formControlName\", \"disabled\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [\"view\", \"\"], [\"edit\", \"\"], [3, \"ngTemplateOutlet\"], [1, \"col-11\", \"flex\", \"align-items-center\"], [\"id\", \"view-item-name\", 1, \"m-0\", \"pl-1\", \"w-full\", 3, \"click\"], [\"id\", \"select-actions\", \"acceptIcon\", \"edit\", \"declineIcon\", \"delete_outline\", 3, \"acceptLast\", \"acceptEvent\", \"declineEvent\", 4, \"ngIf\"], [\"id\", \"select-actions\", \"acceptIcon\", \"edit\", \"declineIcon\", \"delete_outline\", 3, \"acceptLast\", \"acceptEvent\", \"declineEvent\"], [1, \"col-11\", 3, \"inputText\", \"acceptEvent\", \"declineEvent\"]],\n      template: function ItemComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0);\n          i0.ɵɵelement(1, \"mat-checkbox\", 1);\n          i0.ɵɵtemplate(2, ItemComponent_ng_container_2_Template, 1, 1, \"ng-container\", 2);\n          i0.ɵɵtemplate(3, ItemComponent_ng_container_3_Template, 1, 1, \"ng-container\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(4, ItemComponent_ng_template_4_Template, 4, 4, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n          i0.ɵɵtemplate(6, ItemComponent_ng_template_6_Template, 1, 1, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formControlName\", ctx.formFields.IsChecked)(\"disabled\", !!ctx.listState.itemUnderEditId);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.isUnderEdit());\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isUnderEdit());\n        }\n      },\n      dependencies: [i3.NgIf, i3.NgTemplateOutlet, i4.MatCheckbox, i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.ActionsComponent, i6.EditItemComponent]\n    });\n  }\n  return ItemComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}